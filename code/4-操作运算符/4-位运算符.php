<?php
$a = 5;
$b = -5;


var_dump($a & $b);  // 1
/* 
按位与
  首先取出系统存储的数值，然后判断符号位，进行转码

   原码：第一位为符号位，参与运算
   5   -> 0000 0101
   -5  -> 1000 0101

  反码：正数反码不变，负数反码符号位不变，后面按位取反
   5   -> 0000 0101
   -5  -> 1111 1010

  补码：正数补码不变，负数反码+1
   5   -> 0000 0101
   -5  -> 1111 1011

  计算机进行位运算都是采用补码进行运算 ，运算结束后需要转成原码才是要显示的结果
    0000 0101
  & 1111 1011
  = 0000 0001
  结果为1
  */

var_dump(~$a);
echo '<hr>';
/* 
  按位非
  正数反码补码是本身，按位非之后，补码符号位为1，要-1还原为反码，再还原为原码
     0000 0101
  ~  1111 1010
  -1 1111 1001
  =  1000 0110
  结果为-6
  */

var_dump($b << 1);  // -10
var_dump($b << 2);  //-20
var_dump($b << 3);  // -40
var_dump($b << 4);  //-80
echo '<hr>';
/* 
  按位左移1位和2位
  补    1111 1011
  <<1   1111 0110   <<2   1110 1100
  反    1111 0101         1110 1011
  原    1000 1010         1001 0100
  十进制 -8+-2= -10       -16+-4= -20
  */

var_dump($b >> 1);  // -3
var_dump($b >> 2);  // -2
var_dump($b >> 3);  // -1
var_dump($b >> 4);  // -1后面都是-1。为啥？看下面
/*
  按位右移1位
  补    1111 1011
  >>1   1111 1101     >>3 1111 1111    >>4  1111 1111
  反    1111 1100         1111 1110     同
  原    1000 0011         1000 0001
  十进制 -2+-1= -3        -1              -1
  */

  // 按位左移：可以看做补码乘以2
  // 按位右移：类似补码除以2的操作，但不完全正确

