<pre>
/**
 * 递归算法：把问题转化为规模缩小的同类子问题，然后递归调用函数（或过程）来表示问题的解，直到得到最优子问题（无法继续缩小规模），然后从下往上依次计算出结果；
 * 1.简化问题，找到最优子问题，不能再小
 * 2.函数自己调用自己
 * 3.回溯：得到最优子问题后，再从下往上计算出最终结果
 */
/**
 * 应用：求斐波那契数列中第n个数是多少
 * 
 * fn=f(n-1)+f(n-2);
 * f(n-1)=f(n-2)+f(n-3); 以此类推
 * ...
 * f(3)=f(2)+f(1);
 * 也就是说，当递归到最后时，结果也就得到了
 */

/**
 * 递归中2个关键点
 * 递归点：能够将当前问题转化为更小规模的同类问题的函数或者过程
 * 递归出口：已经得到最优子问题，无法再次调用递归函数，也就是结束递归的边界条件，如果没有就是无限递归，死循环
 */

<?php
function recursion($n){
  // 先找的递归出口
  if($n==1||$n==2)return 1;
  // 递归点：求f[n]与求f[n-1]的过程完全一样，只是f(n-1)计算规模更小一点点
  return recursion($n-1)+recursion($n-2);
}
echo recursion(15);
