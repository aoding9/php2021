<pre>

插入排序：
将数组分成2个部分：有序部分和待排序部分，每次从无序部分取出一个数，与有序部分循环比较，找到正确位置后插入其中，直到数组全部变成有序序列

插入排序适合少量数据排序，是稳定的排序方式

这么说好像不太容易理解，打个简单的比方：打麻将时，你每次从牌堆中摸一张牌放到面前，放入时会先从左往右或从右往左比较，找到正确位置后，插入进去。

不过，这里的两个数组，实际上是一个数组，那么就是这样，我们一上来就已经有了一堆乱序的麻将，首先默认第一张位置是对的（因为只有一张牌，此时必然是有序数组），然后开始看第二张，先比较第二张和第一张，如果位置正确，那么就不用交换，如果位置不正确，那么抽出第二张牌，然后把第一张麻将右移一格，接着放入第二张牌。

然后看第三张牌，他先和第二张比，再和第一张比，重复即可。

为什么从右往左比：如果元素位置正确，那么只需比较一次就结束了。如果从左往右比，即便位置正确，也要多比较几次。

<?php
$arr = [2, 6, 1, 7, 3, 8, 9, 4];

// 最多插入次数：len-1 因为第一个数默认属于有序序列
for ($i = 1, $len = count($arr); $i <= $len - 1; $i++) {
  //  取出元素
  $temp = $arr[$i];
  // 如果比较后发现不用插入，就不交换位置（即该元素本身就位于正确位置）
  $change = false;
  // *将其与有序部分循环比较，这里采用从后往前比，因为如果元素刚好位于正确位置，那么就不用交换，而且只比较一次，效率比从前往后比高一点
  for ($j = $i - 1; $j >= 0; $j--) {
    if ($temp < $arr[$j]) {
      // 将每个数组元素往后挪动1位，给待插入元素挪出位置
      $arr[$j + 1] = $arr[$j];
      // 如果小于某个数，说明需要change
      $change = true;
    } else {
      // 如果大于等于，则表示找到正确位置，结束内层循环
      break;
    }
  }
  // 循环结束之后，判断是否需要插入
  if ($change) {
    // 由于j在最后一次循环结束后仍然--了一次，此处需要加回来
    $arr[$j + 1] = $temp;
  }
}

print_r($arr);
